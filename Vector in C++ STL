Vector in C++ STL


In C++, vector is a dynamic array that stores collection of elements same type in contiguous memory. It has the ability to resize itself automatically when an element is inserted or deleted.

Syntax
Vector is defined as the std::vector class template inside the <vector> header file.


vector<T> v;

where T is the type of elements and v is the name assigned to the vector.

Creating a Vector

Creating a vector involves creating an instance of std::vector class. This requires us to provide the type of elements as template parameter.


#include <bits/stdc++.h>
using namespace std;

int main() {

    // Creating an empty vector
    vector<int> v1;
    
    return 0;
}

We can also provide the values to be stored in the vector inside {} curly braces. This process is called initialization.


#include <bits/stdc++.h>
using namespace std;
void printVector(vector<int>& v) {
    for (auto x: v) {
        cout << x << " ";
    }
    cout << endl;
}
int main() {

    // Creating a vector of 5 elements from
    // initializer list
    vector<int> v1 = {1, 4, 2, 3, 5};

    // Creating a vector of 5 elements with
    // default value
    vector<int> v2(5, 9);

    printVector(v1);
    printVector(v2);
    return 0;
}


Output
1 4 2 3 5 
9 9 9 9 9 

In the above example,

Statement vector<int> v1 = {1, 4, 2, 3, 5} initializes a vector with given values.
Statement vector<int> v2(5, 9) creates a vector of size 5 where each element initialized to 9.


Inserting Elements

An element can be inserted into a vector using vector insert() method which takes linear time. But for the insertion at the end, the vector push_back() method can be used. It is much faster, taking only constant time.


#include <bits/stdc++.h>
using namespace std;

int main() {
    vector<char> v = {'a', 'f', 'd'};
  
  	// Inserting 'z' at the back
  	v.push_back('z');
  
  	// Inserting 'c' at index 1
  	v.insert(v.begin() + 1, 'c');

  	for (int i = 0; i < v.size(); i++)
        cout << v[i] << " ";
    return 0;
}


Output
a c f d z 


Accessing Elements

Just like arrays, vector elements can be accessed using their index inside the [] subscript operator. This method is fast but doesn’t check whether the given index exists in the vector or not. So, there is another member method vector at() for safely accessing elements.


#include <bits/stdc++.h>
using namespace std;

int main() {
    vector<char> v = {'a', 'c', 'f', 'd', 'z'};

    // Accessing and printing values
  	cout << v[3] << endl;
  	cout << v.at(2);
  
    return 0;
}


Output
d
f


To know more about accessing vector elements, refer to the article – Different Ways to Access Elements in Vector


Updating Elements

Updating elements is very similar to the accessing except that we use an assignment operator to assign a new value. It uses the same methods: [] subscript operator and vector at().



#include <bits/stdc++.h>
using namespace std;

int main() {
    vector<char> v = {'a', 'c', 'f', 'd', 'z'};

    // Updating values using indexes 3 and 2
  	v[3] = 'D';
  	v.at(2) = 'F';
  	
  	cout << v[3] << endl;
  	cout << v.at(2);
    return 0;
}




Output
D
F

More methods to update vector elements are discussed in this article – Different Ways to Update Vector Elements


Finding Size

One of the common problems with arrays was to keep a separate variable to store the size information. Vector provides the solution to this problem by providing size() method.


#include <bits/stdc++.h>
using namespace std;

int main() {
    vector<char> v = {'a', 'c', 'f', 'd', 'z'};

    // Finding size
    cout << v.size();
  
    return 0;
}





Output
5


Traversing

Vector in C++ can be traversed using indexes in a loop. The indexes start from 0 and go up to vector size – 1. To iterate through this range, we can use a loop and determine the size of the vector using the vector size()method.


 #include <bits/stdc++.h>
using namespace std;
int main() {
    vector<char> v = {'a', 'c', 'f', 'd', 'z'};
    // Traversing vector using range based for loop
  	for (int i = 0; i < v.size(); i++)
        cout << v[i] << " ";
    return 0;
}


Output
a c f d z 

We can also use a range-based loop for simple traversal. More ways to traverse vectors are discussed in this article – Different Ways to Iterate Through Vector

Deleting Elements

An element can be deleted from a vector using vector erase() but this method needs iterator to the element to be deleted. If only the value of the element is known, then find() function is used to find the position of this element.

For the deletion at the end, the vector pop_back() method can be used, and it is much faster, taking only constant time.


#include <bits/stdc++.h>
using namespace std;

int main() {
    vector<char> v = {'a', 'c', 'f', 'd', 'z'};

    // Deleting last element 'z'
  	v.pop_back();
  
  	// Deleting element 'f'
  	v.erase(find(v.begin(), v.end(), 'f'));
  	
  	for (int i = 0; i < v.size(); i++) {
        cout << v[i] << " ";
    }
    return 0;
}

  
  	
Output
a c f d 
a c d 

To know more about the deletion of an element in the vector, refer to this article – Different Ways to Remove Elements from Vector

Other Operations

Vector is one of the most frequently used containers in C++. It is used in many situations for different purposes. The following examples aim to help you master vector operations beyond the basics.


Check if a Vector is Empty

Find the Size of a Vector

Resize a Vector

Reverse a Vector

Sort a Vector in Ascending Order

Sort a Vector in Descending Order

Different Ways to Copy a Vector

Swap Two Vectors

Remove Duplicates from a Vector


Passing Vector to Functions

Vectors can be passed to a function as arguments just like any other variable in C++. But it is recommended to pass the vector by reference so as to avoid the copying of all elements which can be expensive if the vector is large. Refer to this article to know more – Passing Vector to a Function

Internal Working of Vector

Vector internal working is very interesting and useful to select and optimize its usage. Understanding the internal memory management also helps in modifying the default mechanism of vector to suits our needs. Refer to this article to know more – Internal Working of Vector

Multidimensional Vectors

Just like arrays, we can also create multidimensional vectors in C++. Each element of multidimensional vector can be visualized as the collection of vectors with dimension one less that the current vector. For example, 2D vectors are the collection of 1D vectors, while 3D vectors are the collection of 2D vectors and so on.

With the addition of each dimension, the complexity of operations on the vectors also increases.



All Member Functions

Following is the list of all member functions of std::vector class in C++:

push_back()

Adds an element to the end of the vector.


pop_back()

Removes the last element of the vector.


size()

Returns the number of elements in the vector.


max_size()

Returns the maximum number of elements that the vector can hold.


resize()

Changes the size of the vector.


empty()

Checks if the vector is empty.


operator[]

Accesses the element at a specific position.


at()

Accesses the element at a specific position, with bounds checking.


front()

Accesses the first element of the vector.


back()

Accesses the last element of the vector.


begin()

Returns an iterator pointing to the first element of the vector.


end()

Returns an iterator pointing to the past-the-end element of the vector.


rbegin()

Returns a reverse iterator pointing to the last element of the vector.


rend()

Returns a reverse iterator pointing to the element preceding the first element of the vector.


cbegin

Returns const_iterator to beginning 


cend

Returns const_iterator to end


crbegin

Returns const_reverse_iterator to reverse beginning


crend

Returns const_reverse_iterator to reverse end


insert()

Inserts elements at a specific position in the vector.


erase()

Removes elements from a specific position or range in the vector.


swap()

Swaps the contents of the vector with those of another vector.


clear()

Removes all elements from the vector.


emplace()

Constructs and inserts an element in the vector.


emplace_back()

Constructs and inserts an element at the end of the vector.


assign()

Assigns new values to the vector elements by replacing old ones.


capacity()

Returns the size of the storage space currently allocated to the vector.


reserve()

Requests that the vector capacity be at least enough to contain a specified number of elements.


shrink_to_fit()

Reduces memory usage by freeing unused space.


data()

Returns a direct pointer to the memory array used internally by the vector to store its owned elements. 


get_allocator

Returns a copy of the allocator object associated with the vector.
