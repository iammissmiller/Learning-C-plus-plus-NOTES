Set in C++ STL

In C++, sets are associative container which stores unique elements in some sorted order. By default, it is sorted ascending order of the keys, but this can be changed as per requirement. It provides fast insertion, deletion and search operations.

Example:

#include <iostream>
#include <set>
using namespace std;

int main() {
    
    // Creating a set of integers
    set<int> s = {3, 5, 2, 1};
    
    for (auto x : s)
        cout << x << " ";
    return 0;
}

Output
1 2 3 5 
 
Explanation: In the above program, we create a set with name s values {3, 5, 2, 1}.

Syntax
The set container is defined as std::set class template inside <set> header file.

set<T, comp> s;


where,

T: Data type of elements in the set.
s: Name assigned to the set.
comp: It is a binary predicate function that tells set how to compare two elements. It is used to sort set in custom order. It is optional and if not provided, set is sorted in increasing order.
Declaration and Initialization

We can declare and initialize a set in multiple ways as shown in the below code:

#include <bits/stdc++.h>
using namespace std;

int main() {
    
    // Creating an empty set
    set<int> s1;

    // Creating a set from an initializer list
    set<int> s2 = {5, 1, 3, 2, 4};

    for (auto i : s2) 
        cout << i << " ";
    return 0;
}

Output
1 2 3 4 5 

Explanation: In this program, we create two sets:

Statement set<int> s1 creates an empty set s1. This is called default initialization.
Statement set<int> s2 = {5, 1, 3, 2} create s2 with 4 elements using initializer list.
To know more ways to initialize a set in C++, refer to the article – Different Ways to Initialize Set


Basic Operations

Here are the basic operations that can be performed on a set:

1. Inserting Elements
In set, elements are added using the insert() or emplace() function. If the element already exists in the set, it will not be added again. We cannot specify the position to insert the element as it is automatically decided according to the order.

Example:

#include <bits/stdc++.h>
using namespace std;

int main() {
    set<int> s = {1, 4, 2};
    
    // Insert elements into set
    s.insert(5);
    s.emplace(3);
    s.insert(5);
    
    for (auto x: s) cout << x << " ";
    return 0;
}

Output
1 2 3 4 5 

If you want to read more about this topic, then refer this article – Different Ways Insert Elements into Set

2. Accessing Elements

We can’t access elements of a set by index like in an array or vector. In set, we have to increment or decrement iterator obtained from begin() or end() methods respectively to access the element by position. This can also be done with the help of next() or advance() function.

Example:

#include <bits/stdc++.h>
using namespace std;

int main() {
    set<int> s = {1, 4, 2, 3, 5};

    // Accessing first element
    auto it1 = s.begin();
    
    // Accessing third element
    auto it2 = next(it1, 2);
    
    cout << *it1 << " " << *it2;
    return 0;
}

Output
1 3

Explanation: In the above program, s.begin() returns an iterator to the first element of the set which is stored in it1. To access the third element, next() is used to move the iterator it1 by 2 positions and store it in it2. The *it1 and *it2 dereference the iterators to access the values at those positions.

To know more about accessing elements from set, refer this article – Different Ways to Access Elements of Set

3. Updating Elements

We cannot change the value of elements once they are stored in the set.

4. Finding Elements

Set provides fast search by value operation using the find() member function. This function returns iterator the element if found, otherwise returns end() iterator.

#include <bits/stdc++.h>
using namespace std;

int main() {
    set<int> s = {1, 4, 2, 3, 5};

    // Finding 3
    auto it = s.find(3);
    
    if (it != s.end()) cout << *it;
    else cout << "Element not Found!";
    return 0;
}

Output
3

To know more methods to search element in set, refer to this article – Check if Set Contains an Element

5. Traversing

Just like other containers, sets can be easily traversed using range-based for loop or using begin() and end() iterators.

Example:

#include <bits/stdc++.h>
using namespace std;

int main() {
    set<int> s = {5, 1, 4, 3, 2};
    
    // Traversing using range based for loop
    for(auto it = s.begin(); it != s.end(); it++)
        cout << *it << " ";
    return 0;
}

Output
1 2 3 4 5 
To know more about on this topic, simple refer this article – Different Ways to Traverse a Set

6. Deleting Elements
In set, elements are removed from a set using the erase() function. We can erase elements either by value or by position.

Example:

#include <bits/stdc++.h>
using namespace std;

int main() {
    set<int> s = {1, 4, 2, 3, 5};
    
    // Deleting elements by value
    s.erase(5);
    
    // Deleting first element by iterator
    s.erase(s.begin());
    
    for (auto x: s) cout << x << " ";
    return 0;
}

Output
2 3 4 
To know more about on this topic, refer this article – Different Ways to Delete Elements from Set
