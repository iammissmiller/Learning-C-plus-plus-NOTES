Exception Handling in C++

In C++, exceptions are unexpected problems or errors that occur while a program is running. For example, in a program that divides two numbers, dividing a number by 0 is an exception as it may lead to undefined errors.

The process of dealing with exceptions is known as exception handling. It allows programmers to make the program ready for any errors that may happen during execution and handle them gracefully so that it keeps running without errors.



try-catch Block

C++ provides an inbuilt feature for handling exceptions using try and catch block. It is an exception handling mechanism where the code that may cause an exception is placed inside the try block and the code that handles the exception is placed inside the catch block.


Syntax

try {         
    // Code that might throw an exception
} 
catch (ExceptionType e) {   
    // exception handling code
}


When an exception occurs in try block, the execution stops, and the control goes to the matching catch block for handling.





Throwing Exceptions

Throwing exception means returning some kind of value that represent the exception from the try block. The matching catch block is found using the type of the thrown value. The throw keyword is used to throw the exception.


try {         
    throw val
} 
catch (ExceptionType e) {   
    // exception handling code
}

There are three types of values that can be thrown as an exception:

Built-in Types

Standard Exceptions

Custom Exceptions



Throwing Built-in Types
Throwing built-in types is very simple but it does not provide any useful information. For example,


#include <bits/stdc++.h>
using namespace std;

int main() {


    int x = 7;
    try {
        if (x % 2 != 0) {
            
            // Throwing int
            throw -1;
        }
    }
    
    // Catching int
    catch (int e) {
        cout << "Exception Caught: " << e;
    }



    return 0;
}


Output
Exception Caught: -1


Here, we have to make decision based on the value thrown. It is not much different from handling errors using if else. There is a better technique available in C++. Instead of throwing simple values, we can throw objects of classes that contains the information about the nature of exception in themselves.




Throwing Standard Exceptions

Standard exceptions are the set of classes that represent different types of common exceptions. All these classes are defined inside <stdexcept> header file and mainly derived from std::exception class which act as the base class for inbuilt exceptions.


These exceptions are thrown by C++ library components so we should know how to handle them. The what() method is present in every standard exception to provide information about the exception itself.

For example, the vector at() method throws an out_of_range exception when the element with given index does not exists.


#include <bits/stdc++.h>
using namespace std;

int main() {
    vector<int> v = {1, 2, 3};
    


    try {
        // Accessing out of bound element
        v.at(10);
    }
    catch (out_of_range e) {
        cout << "Caught: " << e.what();
    }



    return 0;
}


Output
Caught: vector::_M_range_check: __n (which is 10) >= this->size() (which is 3)
We can also manually throw standard exceptions using throw statement.




Throwing Custom Exceptions

When the standard exceptions cannot satisfy our requirement, we can create a custom exception class. It is recommended to inherit standard exception in this class to provide seamless integrity with library components though, it is not compulsory.




Catching Exceptions

As already told, the catch block is used to catch the exceptions thrown in the try block. The catch block takes one argument, which should be of the same type as the exception.


catch (exceptionType e) {
    ...
}
Here, e is the name given to the exception. Statements inside the catch block will be executed if the exception of exceptionType is thrown in try block.




Catching Multiple Exceptions

There can be multiple catch blocks associated with a single try block to handle multiple types of exceptions. For example,


try {         
    // Code that might throw an exception
} 
catch (type1 e) {   
    // executed when exception is of type1
}
catch (type2 e) {   
    // executed when exception is of type2
}
catch (...) {
    // executed when no matching catch is found
}



Catch by Value or Reference

Just like function arguments, the catch block can catch exceptions either by value or by reference. Both of the methods have their own advantage.


Catch by Value

Catching exceptions by value creates a new copy of the thrown object in the catch block. Generally, the exceptions objects are not very large so there is not much overhead of creating copies.



#include <bits/stdc++.h>
using namespace std;

int main() {


    try {
        throw runtime_error("This is runtime exception");
    }
    
    // Catching by value
    catch (runtime_error e) {
        cout << "Caught: " << e.what();
    }




    return 0;
}


Output
Caught: This is runtime exception



Catch by Reference

Catch by reference method just pass the reference to the exception thrown instead of creating a copy. Although it reduces the copy overhead, it is not the primary advantage of this method. The main advantage of this method is in catching polymorphic exception types. For example,



#include <bits/stdc++.h>
using namespace std;

int main() {


    try {
        throw runtime_error("This is runtime exception");
    }
    
    // Catching by value
    catch (exception& e) {
        cout << "Caught: " << e.what();
    }




    return 0;
}


Output
Caught: This is runtime exception




Handle Uncaught Exceptions

If the exception is not caught by any of the catch block (in case catch all is not present), then by default, the exception handling subsystem aborts the execution of the program. But this behaviour can be changed by creating a custom terminate handler and setting it as default using set_terminate() function.



Best Practices of Exception Handling
Exception handling in C++ is a useful tool to make a robust program but there are several common mistakes to avoid when implementing exception handling in our programs. So, there are some best practices that should be followed in exception handling:

Don’t use exceptions for regular control flow. Only use them for exceptional situations (errors).
Catch exceptions by reference whenever possible to avoid copying overhead and enable polymorphic selection.
Always catch exceptions by reference to a constant to avoid accidental modification.
Catching generic exceptions using catch(…) does not provide information about exception type, so better to catch specific exceptions to handle errors appropriately.
Failing to catch exceptions can cause the program to terminate unexpectedly. Always ensure exceptions are caught and handled properly to maintain stability.
Not releasing resources (e.g., memory, file handles) after an exception can led to resource leaks. Use proper cleanup mechanisms such as RAII or finally blocks.














































