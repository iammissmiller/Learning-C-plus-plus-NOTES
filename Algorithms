Algorithms

STL algorithms offer a wide range of functions to perform common operations on data (mainly containers). These functions implement the most efficient version of the algorithm for tasks such as sorting, searching, modifying and manipulating data in containers, etc. All STL algorithms are defined inside the <algorithm> and <numeric> header file.
There is no formal classification of STL algorithms, but we can group them into two types based on the type of operations they perform:

Manipulative Algorithms
Manipulative algorithms perform operations that modifies the elements of the given container or rearrange their order.
Some of the common manipulative algorithm includes:

copy: Copies a specific number of elements from one range to another.
fill: Assigns a specified value to all elements in a range.
transform: Applies a function to each element in a range and stores the result in another range.
replace: Replaces all occurrences of a specific value in a range with a new value.
swap: Exchanges the values of two variables.
reverse: Reverses the order of elements in a range.
rotate: Rotates the elements in a range such that a specific element becomes the first.
remove: Removes all elements with a specified value from a range but does not reduce the container size.
unique: Removes consecutive duplicate elements from a range.
Non-Manipulative Algorithms
Non-manipulating algorithms are the type of algorithms provided by the Standard Template Library (STL) that operate on elements in a range without altering their values or the order of the elements.
The below are the few examples of the STLâ€™s non-manipulative algorithms:

max_element: Find the maximum element in the given range.
min_element : To find the minimum element in the given range.
accumulate: Finds the sum of the elements of the given range.
count: Counts the occurrences of given element in the range.
find: Returns an iterator to the first occurrence of an element in the range.
is_permutation: Checks if one range is a permutation of another.
is_sorted: Checks if the elements in a range are sorted in non-decreasing order.
partial_sum: Computes the cumulative sum of elements in a range.
